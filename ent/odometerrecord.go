// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yawnak/fuel-record-crud/ent/odometerrecord"
)

// OdometerRecord is the model entity for the OdometerRecord schema.
type OdometerRecord struct {
	config
	// ID of the ent.
	ID           int `json:"id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OdometerRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case odometerrecord.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OdometerRecord fields.
func (or *OdometerRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case odometerrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			or.ID = int(value.Int64)
		default:
			or.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OdometerRecord.
// This includes values selected through modifiers, order, etc.
func (or *OdometerRecord) Value(name string) (ent.Value, error) {
	return or.selectValues.Get(name)
}

// Update returns a builder for updating this OdometerRecord.
// Note that you need to call OdometerRecord.Unwrap() before calling this method if this OdometerRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OdometerRecord) Update() *OdometerRecordUpdateOne {
	return NewOdometerRecordClient(or.config).UpdateOne(or)
}

// Unwrap unwraps the OdometerRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OdometerRecord) Unwrap() *OdometerRecord {
	_tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OdometerRecord is not a transactional entity")
	}
	or.config.driver = _tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OdometerRecord) String() string {
	var builder strings.Builder
	builder.WriteString("OdometerRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", or.ID))
	builder.WriteByte(')')
	return builder.String()
}

// OdometerRecords is a parsable slice of OdometerRecord.
type OdometerRecords []*OdometerRecord
