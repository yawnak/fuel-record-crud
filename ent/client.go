// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/yawnak/fuel-record-crud/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/yawnak/fuel-record-crud/ent/car"
	"github.com/yawnak/fuel-record-crud/ent/fuelrecord"
	"github.com/yawnak/fuel-record-crud/ent/odometerrecord"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Car is the client for interacting with the Car builders.
	Car *CarClient
	// FuelRecord is the client for interacting with the FuelRecord builders.
	FuelRecord *FuelRecordClient
	// OdometerRecord is the client for interacting with the OdometerRecord builders.
	OdometerRecord *OdometerRecordClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Car = NewCarClient(c.config)
	c.FuelRecord = NewFuelRecordClient(c.config)
	c.OdometerRecord = NewOdometerRecordClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Car:            NewCarClient(cfg),
		FuelRecord:     NewFuelRecordClient(cfg),
		OdometerRecord: NewOdometerRecordClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Car:            NewCarClient(cfg),
		FuelRecord:     NewFuelRecordClient(cfg),
		OdometerRecord: NewOdometerRecordClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Car.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Car.Use(hooks...)
	c.FuelRecord.Use(hooks...)
	c.OdometerRecord.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Car.Intercept(interceptors...)
	c.FuelRecord.Intercept(interceptors...)
	c.OdometerRecord.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CarMutation:
		return c.Car.mutate(ctx, m)
	case *FuelRecordMutation:
		return c.FuelRecord.mutate(ctx, m)
	case *OdometerRecordMutation:
		return c.OdometerRecord.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CarClient is a client for the Car schema.
type CarClient struct {
	config
}

// NewCarClient returns a client for the Car from the given config.
func NewCarClient(c config) *CarClient {
	return &CarClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `car.Hooks(f(g(h())))`.
func (c *CarClient) Use(hooks ...Hook) {
	c.hooks.Car = append(c.hooks.Car, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `car.Intercept(f(g(h())))`.
func (c *CarClient) Intercept(interceptors ...Interceptor) {
	c.inters.Car = append(c.inters.Car, interceptors...)
}

// Create returns a builder for creating a Car entity.
func (c *CarClient) Create() *CarCreate {
	mutation := newCarMutation(c.config, OpCreate)
	return &CarCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Car entities.
func (c *CarClient) CreateBulk(builders ...*CarCreate) *CarCreateBulk {
	return &CarCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarClient) MapCreateBulk(slice any, setFunc func(*CarCreate, int)) *CarCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarCreateBulk{err: fmt.Errorf("calling to CarClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Car.
func (c *CarClient) Update() *CarUpdate {
	mutation := newCarMutation(c.config, OpUpdate)
	return &CarUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarClient) UpdateOne(ca *Car) *CarUpdateOne {
	mutation := newCarMutation(c.config, OpUpdateOne, withCar(ca))
	return &CarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarClient) UpdateOneID(id int) *CarUpdateOne {
	mutation := newCarMutation(c.config, OpUpdateOne, withCarID(id))
	return &CarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Car.
func (c *CarClient) Delete() *CarDelete {
	mutation := newCarMutation(c.config, OpDelete)
	return &CarDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarClient) DeleteOne(ca *Car) *CarDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarClient) DeleteOneID(id int) *CarDeleteOne {
	builder := c.Delete().Where(car.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarDeleteOne{builder}
}

// Query returns a query builder for Car.
func (c *CarClient) Query() *CarQuery {
	return &CarQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCar},
		inters: c.Interceptors(),
	}
}

// Get returns a Car entity by its id.
func (c *CarClient) Get(ctx context.Context, id int) (*Car, error) {
	return c.Query().Where(car.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarClient) GetX(ctx context.Context, id int) *Car {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CarClient) Hooks() []Hook {
	return c.hooks.Car
}

// Interceptors returns the client interceptors.
func (c *CarClient) Interceptors() []Interceptor {
	return c.inters.Car
}

func (c *CarClient) mutate(ctx context.Context, m *CarMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Car mutation op: %q", m.Op())
	}
}

// FuelRecordClient is a client for the FuelRecord schema.
type FuelRecordClient struct {
	config
}

// NewFuelRecordClient returns a client for the FuelRecord from the given config.
func NewFuelRecordClient(c config) *FuelRecordClient {
	return &FuelRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fuelrecord.Hooks(f(g(h())))`.
func (c *FuelRecordClient) Use(hooks ...Hook) {
	c.hooks.FuelRecord = append(c.hooks.FuelRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fuelrecord.Intercept(f(g(h())))`.
func (c *FuelRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.FuelRecord = append(c.inters.FuelRecord, interceptors...)
}

// Create returns a builder for creating a FuelRecord entity.
func (c *FuelRecordClient) Create() *FuelRecordCreate {
	mutation := newFuelRecordMutation(c.config, OpCreate)
	return &FuelRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FuelRecord entities.
func (c *FuelRecordClient) CreateBulk(builders ...*FuelRecordCreate) *FuelRecordCreateBulk {
	return &FuelRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FuelRecordClient) MapCreateBulk(slice any, setFunc func(*FuelRecordCreate, int)) *FuelRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FuelRecordCreateBulk{err: fmt.Errorf("calling to FuelRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FuelRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FuelRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FuelRecord.
func (c *FuelRecordClient) Update() *FuelRecordUpdate {
	mutation := newFuelRecordMutation(c.config, OpUpdate)
	return &FuelRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FuelRecordClient) UpdateOne(fr *FuelRecord) *FuelRecordUpdateOne {
	mutation := newFuelRecordMutation(c.config, OpUpdateOne, withFuelRecord(fr))
	return &FuelRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FuelRecordClient) UpdateOneID(id int) *FuelRecordUpdateOne {
	mutation := newFuelRecordMutation(c.config, OpUpdateOne, withFuelRecordID(id))
	return &FuelRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FuelRecord.
func (c *FuelRecordClient) Delete() *FuelRecordDelete {
	mutation := newFuelRecordMutation(c.config, OpDelete)
	return &FuelRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FuelRecordClient) DeleteOne(fr *FuelRecord) *FuelRecordDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FuelRecordClient) DeleteOneID(id int) *FuelRecordDeleteOne {
	builder := c.Delete().Where(fuelrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FuelRecordDeleteOne{builder}
}

// Query returns a query builder for FuelRecord.
func (c *FuelRecordClient) Query() *FuelRecordQuery {
	return &FuelRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFuelRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a FuelRecord entity by its id.
func (c *FuelRecordClient) Get(ctx context.Context, id int) (*FuelRecord, error) {
	return c.Query().Where(fuelrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FuelRecordClient) GetX(ctx context.Context, id int) *FuelRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FuelRecordClient) Hooks() []Hook {
	return c.hooks.FuelRecord
}

// Interceptors returns the client interceptors.
func (c *FuelRecordClient) Interceptors() []Interceptor {
	return c.inters.FuelRecord
}

func (c *FuelRecordClient) mutate(ctx context.Context, m *FuelRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FuelRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FuelRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FuelRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FuelRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FuelRecord mutation op: %q", m.Op())
	}
}

// OdometerRecordClient is a client for the OdometerRecord schema.
type OdometerRecordClient struct {
	config
}

// NewOdometerRecordClient returns a client for the OdometerRecord from the given config.
func NewOdometerRecordClient(c config) *OdometerRecordClient {
	return &OdometerRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `odometerrecord.Hooks(f(g(h())))`.
func (c *OdometerRecordClient) Use(hooks ...Hook) {
	c.hooks.OdometerRecord = append(c.hooks.OdometerRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `odometerrecord.Intercept(f(g(h())))`.
func (c *OdometerRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.OdometerRecord = append(c.inters.OdometerRecord, interceptors...)
}

// Create returns a builder for creating a OdometerRecord entity.
func (c *OdometerRecordClient) Create() *OdometerRecordCreate {
	mutation := newOdometerRecordMutation(c.config, OpCreate)
	return &OdometerRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OdometerRecord entities.
func (c *OdometerRecordClient) CreateBulk(builders ...*OdometerRecordCreate) *OdometerRecordCreateBulk {
	return &OdometerRecordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OdometerRecordClient) MapCreateBulk(slice any, setFunc func(*OdometerRecordCreate, int)) *OdometerRecordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OdometerRecordCreateBulk{err: fmt.Errorf("calling to OdometerRecordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OdometerRecordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OdometerRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OdometerRecord.
func (c *OdometerRecordClient) Update() *OdometerRecordUpdate {
	mutation := newOdometerRecordMutation(c.config, OpUpdate)
	return &OdometerRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OdometerRecordClient) UpdateOne(or *OdometerRecord) *OdometerRecordUpdateOne {
	mutation := newOdometerRecordMutation(c.config, OpUpdateOne, withOdometerRecord(or))
	return &OdometerRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OdometerRecordClient) UpdateOneID(id int) *OdometerRecordUpdateOne {
	mutation := newOdometerRecordMutation(c.config, OpUpdateOne, withOdometerRecordID(id))
	return &OdometerRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OdometerRecord.
func (c *OdometerRecordClient) Delete() *OdometerRecordDelete {
	mutation := newOdometerRecordMutation(c.config, OpDelete)
	return &OdometerRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OdometerRecordClient) DeleteOne(or *OdometerRecord) *OdometerRecordDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OdometerRecordClient) DeleteOneID(id int) *OdometerRecordDeleteOne {
	builder := c.Delete().Where(odometerrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OdometerRecordDeleteOne{builder}
}

// Query returns a query builder for OdometerRecord.
func (c *OdometerRecordClient) Query() *OdometerRecordQuery {
	return &OdometerRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOdometerRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a OdometerRecord entity by its id.
func (c *OdometerRecordClient) Get(ctx context.Context, id int) (*OdometerRecord, error) {
	return c.Query().Where(odometerrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OdometerRecordClient) GetX(ctx context.Context, id int) *OdometerRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OdometerRecordClient) Hooks() []Hook {
	return c.hooks.OdometerRecord
}

// Interceptors returns the client interceptors.
func (c *OdometerRecordClient) Interceptors() []Interceptor {
	return c.inters.OdometerRecord
}

func (c *OdometerRecordClient) mutate(ctx context.Context, m *OdometerRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OdometerRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OdometerRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OdometerRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OdometerRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OdometerRecord mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Car, FuelRecord, OdometerRecord []ent.Hook
	}
	inters struct {
		Car, FuelRecord, OdometerRecord []ent.Interceptor
	}
)
