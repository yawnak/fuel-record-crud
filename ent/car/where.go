// Code generated by ent, DO NOT EDIT.

package car

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/yawnak/fuel-record-crud/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldID, id))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCarID, v))
}

// Make applies equality check predicate on the "make" field. It's identical to MakeEQ.
func Make(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldMake, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldModel, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int8) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldYear, v))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldCarID, vs...))
}

// CarIDGT applies the GT predicate on the "car_id" field.
func CarIDGT(v uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldCarID, v))
}

// CarIDGTE applies the GTE predicate on the "car_id" field.
func CarIDGTE(v uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldCarID, v))
}

// CarIDLT applies the LT predicate on the "car_id" field.
func CarIDLT(v uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldCarID, v))
}

// CarIDLTE applies the LTE predicate on the "car_id" field.
func CarIDLTE(v uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldCarID, v))
}

// MakeEQ applies the EQ predicate on the "make" field.
func MakeEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldMake, v))
}

// MakeNEQ applies the NEQ predicate on the "make" field.
func MakeNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldMake, v))
}

// MakeIn applies the In predicate on the "make" field.
func MakeIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldMake, vs...))
}

// MakeNotIn applies the NotIn predicate on the "make" field.
func MakeNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldMake, vs...))
}

// MakeGT applies the GT predicate on the "make" field.
func MakeGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldMake, v))
}

// MakeGTE applies the GTE predicate on the "make" field.
func MakeGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldMake, v))
}

// MakeLT applies the LT predicate on the "make" field.
func MakeLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldMake, v))
}

// MakeLTE applies the LTE predicate on the "make" field.
func MakeLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldMake, v))
}

// MakeContains applies the Contains predicate on the "make" field.
func MakeContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldMake, v))
}

// MakeHasPrefix applies the HasPrefix predicate on the "make" field.
func MakeHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldMake, v))
}

// MakeHasSuffix applies the HasSuffix predicate on the "make" field.
func MakeHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldMake, v))
}

// MakeEqualFold applies the EqualFold predicate on the "make" field.
func MakeEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldMake, v))
}

// MakeContainsFold applies the ContainsFold predicate on the "make" field.
func MakeContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldMake, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldModel, v))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int8) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int8) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int8) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int8) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int8) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int8) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int8) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int8) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldYear, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Car) predicate.Car {
	return predicate.Car(sql.NotPredicates(p))
}
