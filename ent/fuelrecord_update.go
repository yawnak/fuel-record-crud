// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yawnak/fuel-record-crud/ent/fuelrecord"
	"github.com/yawnak/fuel-record-crud/ent/predicate"
)

// FuelRecordUpdate is the builder for updating FuelRecord entities.
type FuelRecordUpdate struct {
	config
	hooks    []Hook
	mutation *FuelRecordMutation
}

// Where appends a list predicates to the FuelRecordUpdate builder.
func (fru *FuelRecordUpdate) Where(ps ...predicate.FuelRecord) *FuelRecordUpdate {
	fru.mutation.Where(ps...)
	return fru
}

// SetCurrentFuelLiters sets the "current_fuel_liters" field.
func (fru *FuelRecordUpdate) SetCurrentFuelLiters(f float64) *FuelRecordUpdate {
	fru.mutation.ResetCurrentFuelLiters()
	fru.mutation.SetCurrentFuelLiters(f)
	return fru
}

// AddCurrentFuelLiters adds f to the "current_fuel_liters" field.
func (fru *FuelRecordUpdate) AddCurrentFuelLiters(f float64) *FuelRecordUpdate {
	fru.mutation.AddCurrentFuelLiters(f)
	return fru
}

// SetDifference sets the "difference" field.
func (fru *FuelRecordUpdate) SetDifference(f float64) *FuelRecordUpdate {
	fru.mutation.ResetDifference()
	fru.mutation.SetDifference(f)
	return fru
}

// AddDifference adds f to the "difference" field.
func (fru *FuelRecordUpdate) AddDifference(f float64) *FuelRecordUpdate {
	fru.mutation.AddDifference(f)
	return fru
}

// Mutation returns the FuelRecordMutation object of the builder.
func (fru *FuelRecordUpdate) Mutation() *FuelRecordMutation {
	return fru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fru *FuelRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fru.sqlSave, fru.mutation, fru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FuelRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FuelRecordUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FuelRecordUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fru *FuelRecordUpdate) check() error {
	if v, ok := fru.mutation.CurrentFuelLiters(); ok {
		if err := fuelrecord.CurrentFuelLitersValidator(v); err != nil {
			return &ValidationError{Name: "current_fuel_liters", err: fmt.Errorf(`ent: validator failed for field "FuelRecord.current_fuel_liters": %w`, err)}
		}
	}
	if _, ok := fru.mutation.CarID(); fru.mutation.CarCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FuelRecord.car"`)
	}
	return nil
}

func (fru *FuelRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fuelrecord.Table, fuelrecord.Columns, sqlgraph.NewFieldSpec(fuelrecord.FieldID, field.TypeUUID))
	if ps := fru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fru.mutation.CurrentFuelLiters(); ok {
		_spec.SetField(fuelrecord.FieldCurrentFuelLiters, field.TypeFloat64, value)
	}
	if value, ok := fru.mutation.AddedCurrentFuelLiters(); ok {
		_spec.AddField(fuelrecord.FieldCurrentFuelLiters, field.TypeFloat64, value)
	}
	if value, ok := fru.mutation.Difference(); ok {
		_spec.SetField(fuelrecord.FieldDifference, field.TypeFloat64, value)
	}
	if value, ok := fru.mutation.AddedDifference(); ok {
		_spec.AddField(fuelrecord.FieldDifference, field.TypeFloat64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fuelrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fru.mutation.done = true
	return n, nil
}

// FuelRecordUpdateOne is the builder for updating a single FuelRecord entity.
type FuelRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FuelRecordMutation
}

// SetCurrentFuelLiters sets the "current_fuel_liters" field.
func (fruo *FuelRecordUpdateOne) SetCurrentFuelLiters(f float64) *FuelRecordUpdateOne {
	fruo.mutation.ResetCurrentFuelLiters()
	fruo.mutation.SetCurrentFuelLiters(f)
	return fruo
}

// AddCurrentFuelLiters adds f to the "current_fuel_liters" field.
func (fruo *FuelRecordUpdateOne) AddCurrentFuelLiters(f float64) *FuelRecordUpdateOne {
	fruo.mutation.AddCurrentFuelLiters(f)
	return fruo
}

// SetDifference sets the "difference" field.
func (fruo *FuelRecordUpdateOne) SetDifference(f float64) *FuelRecordUpdateOne {
	fruo.mutation.ResetDifference()
	fruo.mutation.SetDifference(f)
	return fruo
}

// AddDifference adds f to the "difference" field.
func (fruo *FuelRecordUpdateOne) AddDifference(f float64) *FuelRecordUpdateOne {
	fruo.mutation.AddDifference(f)
	return fruo
}

// Mutation returns the FuelRecordMutation object of the builder.
func (fruo *FuelRecordUpdateOne) Mutation() *FuelRecordMutation {
	return fruo.mutation
}

// Where appends a list predicates to the FuelRecordUpdate builder.
func (fruo *FuelRecordUpdateOne) Where(ps ...predicate.FuelRecord) *FuelRecordUpdateOne {
	fruo.mutation.Where(ps...)
	return fruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fruo *FuelRecordUpdateOne) Select(field string, fields ...string) *FuelRecordUpdateOne {
	fruo.fields = append([]string{field}, fields...)
	return fruo
}

// Save executes the query and returns the updated FuelRecord entity.
func (fruo *FuelRecordUpdateOne) Save(ctx context.Context) (*FuelRecord, error) {
	return withHooks(ctx, fruo.sqlSave, fruo.mutation, fruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FuelRecordUpdateOne) SaveX(ctx context.Context) *FuelRecord {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FuelRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FuelRecordUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fruo *FuelRecordUpdateOne) check() error {
	if v, ok := fruo.mutation.CurrentFuelLiters(); ok {
		if err := fuelrecord.CurrentFuelLitersValidator(v); err != nil {
			return &ValidationError{Name: "current_fuel_liters", err: fmt.Errorf(`ent: validator failed for field "FuelRecord.current_fuel_liters": %w`, err)}
		}
	}
	if _, ok := fruo.mutation.CarID(); fruo.mutation.CarCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FuelRecord.car"`)
	}
	return nil
}

func (fruo *FuelRecordUpdateOne) sqlSave(ctx context.Context) (_node *FuelRecord, err error) {
	if err := fruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fuelrecord.Table, fuelrecord.Columns, sqlgraph.NewFieldSpec(fuelrecord.FieldID, field.TypeUUID))
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FuelRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fuelrecord.FieldID)
		for _, f := range fields {
			if !fuelrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fuelrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fruo.mutation.CurrentFuelLiters(); ok {
		_spec.SetField(fuelrecord.FieldCurrentFuelLiters, field.TypeFloat64, value)
	}
	if value, ok := fruo.mutation.AddedCurrentFuelLiters(); ok {
		_spec.AddField(fuelrecord.FieldCurrentFuelLiters, field.TypeFloat64, value)
	}
	if value, ok := fruo.mutation.Difference(); ok {
		_spec.SetField(fuelrecord.FieldDifference, field.TypeFloat64, value)
	}
	if value, ok := fruo.mutation.AddedDifference(); ok {
		_spec.AddField(fuelrecord.FieldDifference, field.TypeFloat64, value)
	}
	_node = &FuelRecord{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fuelrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fruo.mutation.done = true
	return _node, nil
}
