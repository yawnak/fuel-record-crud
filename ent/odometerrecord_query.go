// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/yawnak/fuel-record-crud/ent/car"
	"github.com/yawnak/fuel-record-crud/ent/odometerrecord"
	"github.com/yawnak/fuel-record-crud/ent/predicate"
)

// OdometerRecordQuery is the builder for querying OdometerRecord entities.
type OdometerRecordQuery struct {
	config
	ctx        *QueryContext
	order      []odometerrecord.OrderOption
	inters     []Interceptor
	predicates []predicate.OdometerRecord
	withCar    *CarQuery
	withNext   *OdometerRecordQuery
	withPrev   *OdometerRecordQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OdometerRecordQuery builder.
func (orq *OdometerRecordQuery) Where(ps ...predicate.OdometerRecord) *OdometerRecordQuery {
	orq.predicates = append(orq.predicates, ps...)
	return orq
}

// Limit the number of records to be returned by this query.
func (orq *OdometerRecordQuery) Limit(limit int) *OdometerRecordQuery {
	orq.ctx.Limit = &limit
	return orq
}

// Offset to start from.
func (orq *OdometerRecordQuery) Offset(offset int) *OdometerRecordQuery {
	orq.ctx.Offset = &offset
	return orq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (orq *OdometerRecordQuery) Unique(unique bool) *OdometerRecordQuery {
	orq.ctx.Unique = &unique
	return orq
}

// Order specifies how the records should be ordered.
func (orq *OdometerRecordQuery) Order(o ...odometerrecord.OrderOption) *OdometerRecordQuery {
	orq.order = append(orq.order, o...)
	return orq
}

// QueryCar chains the current query on the "car" edge.
func (orq *OdometerRecordQuery) QueryCar() *CarQuery {
	query := (&CarClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(odometerrecord.Table, odometerrecord.FieldID, selector),
			sqlgraph.To(car.Table, car.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, odometerrecord.CarTable, odometerrecord.CarColumn),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNext chains the current query on the "next" edge.
func (orq *OdometerRecordQuery) QueryNext() *OdometerRecordQuery {
	query := (&OdometerRecordClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(odometerrecord.Table, odometerrecord.FieldID, selector),
			sqlgraph.To(odometerrecord.Table, odometerrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, odometerrecord.NextTable, odometerrecord.NextColumn),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrev chains the current query on the "prev" edge.
func (orq *OdometerRecordQuery) QueryPrev() *OdometerRecordQuery {
	query := (&OdometerRecordClient{config: orq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := orq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := orq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(odometerrecord.Table, odometerrecord.FieldID, selector),
			sqlgraph.To(odometerrecord.Table, odometerrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, odometerrecord.PrevTable, odometerrecord.PrevColumn),
		)
		fromU = sqlgraph.SetNeighbors(orq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OdometerRecord entity from the query.
// Returns a *NotFoundError when no OdometerRecord was found.
func (orq *OdometerRecordQuery) First(ctx context.Context) (*OdometerRecord, error) {
	nodes, err := orq.Limit(1).All(setContextOp(ctx, orq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{odometerrecord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (orq *OdometerRecordQuery) FirstX(ctx context.Context) *OdometerRecord {
	node, err := orq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OdometerRecord ID from the query.
// Returns a *NotFoundError when no OdometerRecord ID was found.
func (orq *OdometerRecordQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = orq.Limit(1).IDs(setContextOp(ctx, orq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{odometerrecord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (orq *OdometerRecordQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := orq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OdometerRecord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OdometerRecord entity is found.
// Returns a *NotFoundError when no OdometerRecord entities are found.
func (orq *OdometerRecordQuery) Only(ctx context.Context) (*OdometerRecord, error) {
	nodes, err := orq.Limit(2).All(setContextOp(ctx, orq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{odometerrecord.Label}
	default:
		return nil, &NotSingularError{odometerrecord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (orq *OdometerRecordQuery) OnlyX(ctx context.Context) *OdometerRecord {
	node, err := orq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OdometerRecord ID in the query.
// Returns a *NotSingularError when more than one OdometerRecord ID is found.
// Returns a *NotFoundError when no entities are found.
func (orq *OdometerRecordQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = orq.Limit(2).IDs(setContextOp(ctx, orq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{odometerrecord.Label}
	default:
		err = &NotSingularError{odometerrecord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (orq *OdometerRecordQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := orq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OdometerRecords.
func (orq *OdometerRecordQuery) All(ctx context.Context) ([]*OdometerRecord, error) {
	ctx = setContextOp(ctx, orq.ctx, "All")
	if err := orq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OdometerRecord, *OdometerRecordQuery]()
	return withInterceptors[[]*OdometerRecord](ctx, orq, qr, orq.inters)
}

// AllX is like All, but panics if an error occurs.
func (orq *OdometerRecordQuery) AllX(ctx context.Context) []*OdometerRecord {
	nodes, err := orq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OdometerRecord IDs.
func (orq *OdometerRecordQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if orq.ctx.Unique == nil && orq.path != nil {
		orq.Unique(true)
	}
	ctx = setContextOp(ctx, orq.ctx, "IDs")
	if err = orq.Select(odometerrecord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (orq *OdometerRecordQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := orq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (orq *OdometerRecordQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, orq.ctx, "Count")
	if err := orq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, orq, querierCount[*OdometerRecordQuery](), orq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (orq *OdometerRecordQuery) CountX(ctx context.Context) int {
	count, err := orq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (orq *OdometerRecordQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, orq.ctx, "Exist")
	switch _, err := orq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (orq *OdometerRecordQuery) ExistX(ctx context.Context) bool {
	exist, err := orq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OdometerRecordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (orq *OdometerRecordQuery) Clone() *OdometerRecordQuery {
	if orq == nil {
		return nil
	}
	return &OdometerRecordQuery{
		config:     orq.config,
		ctx:        orq.ctx.Clone(),
		order:      append([]odometerrecord.OrderOption{}, orq.order...),
		inters:     append([]Interceptor{}, orq.inters...),
		predicates: append([]predicate.OdometerRecord{}, orq.predicates...),
		withCar:    orq.withCar.Clone(),
		withNext:   orq.withNext.Clone(),
		withPrev:   orq.withPrev.Clone(),
		// clone intermediate query.
		sql:  orq.sql.Clone(),
		path: orq.path,
	}
}

// WithCar tells the query-builder to eager-load the nodes that are connected to
// the "car" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OdometerRecordQuery) WithCar(opts ...func(*CarQuery)) *OdometerRecordQuery {
	query := (&CarClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withCar = query
	return orq
}

// WithNext tells the query-builder to eager-load the nodes that are connected to
// the "next" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OdometerRecordQuery) WithNext(opts ...func(*OdometerRecordQuery)) *OdometerRecordQuery {
	query := (&OdometerRecordClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withNext = query
	return orq
}

// WithPrev tells the query-builder to eager-load the nodes that are connected to
// the "prev" edge. The optional arguments are used to configure the query builder of the edge.
func (orq *OdometerRecordQuery) WithPrev(opts ...func(*OdometerRecordQuery)) *OdometerRecordQuery {
	query := (&OdometerRecordClient{config: orq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	orq.withPrev = query
	return orq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CurrentKilometers float64 `json:"current_kilometers,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OdometerRecord.Query().
//		GroupBy(odometerrecord.FieldCurrentKilometers).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (orq *OdometerRecordQuery) GroupBy(field string, fields ...string) *OdometerRecordGroupBy {
	orq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OdometerRecordGroupBy{build: orq}
	grbuild.flds = &orq.ctx.Fields
	grbuild.label = odometerrecord.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CurrentKilometers float64 `json:"current_kilometers,omitempty"`
//	}
//
//	client.OdometerRecord.Query().
//		Select(odometerrecord.FieldCurrentKilometers).
//		Scan(ctx, &v)
func (orq *OdometerRecordQuery) Select(fields ...string) *OdometerRecordSelect {
	orq.ctx.Fields = append(orq.ctx.Fields, fields...)
	sbuild := &OdometerRecordSelect{OdometerRecordQuery: orq}
	sbuild.label = odometerrecord.Label
	sbuild.flds, sbuild.scan = &orq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OdometerRecordSelect configured with the given aggregations.
func (orq *OdometerRecordQuery) Aggregate(fns ...AggregateFunc) *OdometerRecordSelect {
	return orq.Select().Aggregate(fns...)
}

func (orq *OdometerRecordQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range orq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, orq); err != nil {
				return err
			}
		}
	}
	for _, f := range orq.ctx.Fields {
		if !odometerrecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if orq.path != nil {
		prev, err := orq.path(ctx)
		if err != nil {
			return err
		}
		orq.sql = prev
	}
	return nil
}

func (orq *OdometerRecordQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OdometerRecord, error) {
	var (
		nodes       = []*OdometerRecord{}
		_spec       = orq.querySpec()
		loadedTypes = [3]bool{
			orq.withCar != nil,
			orq.withNext != nil,
			orq.withPrev != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OdometerRecord).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OdometerRecord{config: orq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, orq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := orq.withCar; query != nil {
		if err := orq.loadCar(ctx, query, nodes, nil,
			func(n *OdometerRecord, e *Car) { n.Edges.Car = e }); err != nil {
			return nil, err
		}
	}
	if query := orq.withNext; query != nil {
		if err := orq.loadNext(ctx, query, nodes, nil,
			func(n *OdometerRecord, e *OdometerRecord) { n.Edges.Next = e }); err != nil {
			return nil, err
		}
	}
	if query := orq.withPrev; query != nil {
		if err := orq.loadPrev(ctx, query, nodes, nil,
			func(n *OdometerRecord, e *OdometerRecord) { n.Edges.Prev = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (orq *OdometerRecordQuery) loadCar(ctx context.Context, query *CarQuery, nodes []*OdometerRecord, init func(*OdometerRecord), assign func(*OdometerRecord, *Car)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OdometerRecord)
	for i := range nodes {
		fk := nodes[i].CarID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(car.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "car_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (orq *OdometerRecordQuery) loadNext(ctx context.Context, query *OdometerRecordQuery, nodes []*OdometerRecord, init func(*OdometerRecord), assign func(*OdometerRecord, *OdometerRecord)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*OdometerRecord)
	for i := range nodes {
		if nodes[i].NextOdometerRecordID == nil {
			continue
		}
		fk := *nodes[i].NextOdometerRecordID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(odometerrecord.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "next_odometer_record_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (orq *OdometerRecordQuery) loadPrev(ctx context.Context, query *OdometerRecordQuery, nodes []*OdometerRecord, init func(*OdometerRecord), assign func(*OdometerRecord, *OdometerRecord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*OdometerRecord)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(odometerrecord.FieldNextOdometerRecordID)
	}
	query.Where(predicate.OdometerRecord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(odometerrecord.PrevColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.NextOdometerRecordID
		if fk == nil {
			return fmt.Errorf(`foreign-key "next_odometer_record_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "next_odometer_record_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (orq *OdometerRecordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := orq.querySpec()
	_spec.Node.Columns = orq.ctx.Fields
	if len(orq.ctx.Fields) > 0 {
		_spec.Unique = orq.ctx.Unique != nil && *orq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, orq.driver, _spec)
}

func (orq *OdometerRecordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(odometerrecord.Table, odometerrecord.Columns, sqlgraph.NewFieldSpec(odometerrecord.FieldID, field.TypeUUID))
	_spec.From = orq.sql
	if unique := orq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if orq.path != nil {
		_spec.Unique = true
	}
	if fields := orq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, odometerrecord.FieldID)
		for i := range fields {
			if fields[i] != odometerrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if orq.withCar != nil {
			_spec.Node.AddColumnOnce(odometerrecord.FieldCarID)
		}
		if orq.withNext != nil {
			_spec.Node.AddColumnOnce(odometerrecord.FieldNextOdometerRecordID)
		}
	}
	if ps := orq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := orq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := orq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := orq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (orq *OdometerRecordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(orq.driver.Dialect())
	t1 := builder.Table(odometerrecord.Table)
	columns := orq.ctx.Fields
	if len(columns) == 0 {
		columns = odometerrecord.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if orq.sql != nil {
		selector = orq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if orq.ctx.Unique != nil && *orq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range orq.predicates {
		p(selector)
	}
	for _, p := range orq.order {
		p(selector)
	}
	if offset := orq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := orq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OdometerRecordGroupBy is the group-by builder for OdometerRecord entities.
type OdometerRecordGroupBy struct {
	selector
	build *OdometerRecordQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (orgb *OdometerRecordGroupBy) Aggregate(fns ...AggregateFunc) *OdometerRecordGroupBy {
	orgb.fns = append(orgb.fns, fns...)
	return orgb
}

// Scan applies the selector query and scans the result into the given value.
func (orgb *OdometerRecordGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, orgb.build.ctx, "GroupBy")
	if err := orgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OdometerRecordQuery, *OdometerRecordGroupBy](ctx, orgb.build, orgb, orgb.build.inters, v)
}

func (orgb *OdometerRecordGroupBy) sqlScan(ctx context.Context, root *OdometerRecordQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(orgb.fns))
	for _, fn := range orgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*orgb.flds)+len(orgb.fns))
		for _, f := range *orgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*orgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := orgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OdometerRecordSelect is the builder for selecting fields of OdometerRecord entities.
type OdometerRecordSelect struct {
	*OdometerRecordQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ors *OdometerRecordSelect) Aggregate(fns ...AggregateFunc) *OdometerRecordSelect {
	ors.fns = append(ors.fns, fns...)
	return ors
}

// Scan applies the selector query and scans the result into the given value.
func (ors *OdometerRecordSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ors.ctx, "Select")
	if err := ors.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OdometerRecordQuery, *OdometerRecordSelect](ctx, ors.OdometerRecordQuery, ors, ors.inters, v)
}

func (ors *OdometerRecordSelect) sqlScan(ctx context.Context, root *OdometerRecordQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ors.fns))
	for _, fn := range ors.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ors.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ors.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
