// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/yawnak/fuel-record-crud/ent/car"
	"github.com/yawnak/fuel-record-crud/ent/odometerrecord"
	"github.com/yawnak/fuel-record-crud/ent/predicate"
)

// OdometerRecordUpdate is the builder for updating OdometerRecord entities.
type OdometerRecordUpdate struct {
	config
	hooks    []Hook
	mutation *OdometerRecordMutation
}

// Where appends a list predicates to the OdometerRecordUpdate builder.
func (oru *OdometerRecordUpdate) Where(ps ...predicate.OdometerRecord) *OdometerRecordUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (oru *OdometerRecordUpdate) SetCarID(id uuid.UUID) *OdometerRecordUpdate {
	oru.mutation.SetCarID(id)
	return oru
}

// SetCar sets the "car" edge to the Car entity.
func (oru *OdometerRecordUpdate) SetCar(c *Car) *OdometerRecordUpdate {
	return oru.SetCarID(c.ID)
}

// Mutation returns the OdometerRecordMutation object of the builder.
func (oru *OdometerRecordUpdate) Mutation() *OdometerRecordMutation {
	return oru.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (oru *OdometerRecordUpdate) ClearCar() *OdometerRecordUpdate {
	oru.mutation.ClearCar()
	return oru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OdometerRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OdometerRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OdometerRecordUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OdometerRecordUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oru *OdometerRecordUpdate) check() error {
	if _, ok := oru.mutation.CarID(); oru.mutation.CarCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OdometerRecord.car"`)
	}
	return nil
}

func (oru *OdometerRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(odometerrecord.Table, odometerrecord.Columns, sqlgraph.NewFieldSpec(odometerrecord.FieldID, field.TypeUUID))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oru.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   odometerrecord.CarTable,
			Columns: []string{odometerrecord.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   odometerrecord.CarTable,
			Columns: []string{odometerrecord.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{odometerrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OdometerRecordUpdateOne is the builder for updating a single OdometerRecord entity.
type OdometerRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OdometerRecordMutation
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (oruo *OdometerRecordUpdateOne) SetCarID(id uuid.UUID) *OdometerRecordUpdateOne {
	oruo.mutation.SetCarID(id)
	return oruo
}

// SetCar sets the "car" edge to the Car entity.
func (oruo *OdometerRecordUpdateOne) SetCar(c *Car) *OdometerRecordUpdateOne {
	return oruo.SetCarID(c.ID)
}

// Mutation returns the OdometerRecordMutation object of the builder.
func (oruo *OdometerRecordUpdateOne) Mutation() *OdometerRecordMutation {
	return oruo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (oruo *OdometerRecordUpdateOne) ClearCar() *OdometerRecordUpdateOne {
	oruo.mutation.ClearCar()
	return oruo
}

// Where appends a list predicates to the OdometerRecordUpdate builder.
func (oruo *OdometerRecordUpdateOne) Where(ps ...predicate.OdometerRecord) *OdometerRecordUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OdometerRecordUpdateOne) Select(field string, fields ...string) *OdometerRecordUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OdometerRecord entity.
func (oruo *OdometerRecordUpdateOne) Save(ctx context.Context) (*OdometerRecord, error) {
	return withHooks(ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OdometerRecordUpdateOne) SaveX(ctx context.Context) *OdometerRecord {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OdometerRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OdometerRecordUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oruo *OdometerRecordUpdateOne) check() error {
	if _, ok := oruo.mutation.CarID(); oruo.mutation.CarCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OdometerRecord.car"`)
	}
	return nil
}

func (oruo *OdometerRecordUpdateOne) sqlSave(ctx context.Context) (_node *OdometerRecord, err error) {
	if err := oruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(odometerrecord.Table, odometerrecord.Columns, sqlgraph.NewFieldSpec(odometerrecord.FieldID, field.TypeUUID))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OdometerRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, odometerrecord.FieldID)
		for _, f := range fields {
			if !odometerrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != odometerrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oruo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   odometerrecord.CarTable,
			Columns: []string{odometerrecord.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   odometerrecord.CarTable,
			Columns: []string{odometerrecord.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OdometerRecord{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{odometerrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
