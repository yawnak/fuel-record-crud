// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/yawnak/fuel-record-crud/ent/car"
)

// Car is the model entity for the Car schema.
type Car struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Make holds the value of the "make" field.
	Make string `json:"make,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// Year holds the value of the "year" field.
	Year int32 `json:"year,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarQuery when eager-loading is set.
	Edges        CarEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CarEdges holds the relations/edges for other nodes in the graph.
type CarEdges struct {
	// FuelRecords holds the value of the fuel_records edge.
	FuelRecords []*FuelRecord `json:"fuel_records,omitempty"`
	// OdometerRecords holds the value of the odometer_records edge.
	OdometerRecords []*OdometerRecord `json:"odometer_records,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FuelRecordsOrErr returns the FuelRecords value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) FuelRecordsOrErr() ([]*FuelRecord, error) {
	if e.loadedTypes[0] {
		return e.FuelRecords, nil
	}
	return nil, &NotLoadedError{edge: "fuel_records"}
}

// OdometerRecordsOrErr returns the OdometerRecords value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) OdometerRecordsOrErr() ([]*OdometerRecord, error) {
	if e.loadedTypes[1] {
		return e.OdometerRecords, nil
	}
	return nil, &NotLoadedError{edge: "odometer_records"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Car) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case car.FieldYear:
			values[i] = new(sql.NullInt64)
		case car.FieldMake, car.FieldModel:
			values[i] = new(sql.NullString)
		case car.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Car fields.
func (c *Car) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case car.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case car.FieldMake:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field make", values[i])
			} else if value.Valid {
				c.Make = value.String
			}
		case car.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				c.Model = value.String
			}
		case car.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				c.Year = int32(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Car.
// This includes values selected through modifiers, order, etc.
func (c *Car) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryFuelRecords queries the "fuel_records" edge of the Car entity.
func (c *Car) QueryFuelRecords() *FuelRecordQuery {
	return NewCarClient(c.config).QueryFuelRecords(c)
}

// QueryOdometerRecords queries the "odometer_records" edge of the Car entity.
func (c *Car) QueryOdometerRecords() *OdometerRecordQuery {
	return NewCarClient(c.config).QueryOdometerRecords(c)
}

// Update returns a builder for updating this Car.
// Note that you need to call Car.Unwrap() before calling this method if this Car
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Car) Update() *CarUpdateOne {
	return NewCarClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Car entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Car) Unwrap() *Car {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Car is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Car) String() string {
	var builder strings.Builder
	builder.WriteString("Car(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("make=")
	builder.WriteString(c.Make)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(c.Model)
	builder.WriteString(", ")
	builder.WriteString("year=")
	builder.WriteString(fmt.Sprintf("%v", c.Year))
	builder.WriteByte(')')
	return builder.String()
}

// Cars is a parsable slice of Car.
type Cars []*Car
