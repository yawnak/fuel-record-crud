// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/yawnak/fuel-record-crud/ent/car"
	"github.com/yawnak/fuel-record-crud/ent/fuelrecord"
)

// FuelRecordCreate is the builder for creating a FuelRecord entity.
type FuelRecordCreate struct {
	config
	mutation *FuelRecordMutation
	hooks    []Hook
}

// SetCurrentFuelLiters sets the "current_fuel_liters" field.
func (frc *FuelRecordCreate) SetCurrentFuelLiters(f float64) *FuelRecordCreate {
	frc.mutation.SetCurrentFuelLiters(f)
	return frc
}

// SetDifference sets the "difference" field.
func (frc *FuelRecordCreate) SetDifference(f float64) *FuelRecordCreate {
	frc.mutation.SetDifference(f)
	return frc
}

// SetCreatedAt sets the "created_at" field.
func (frc *FuelRecordCreate) SetCreatedAt(t time.Time) *FuelRecordCreate {
	frc.mutation.SetCreatedAt(t)
	return frc
}

// SetCarID sets the "car_id" field.
func (frc *FuelRecordCreate) SetCarID(u uuid.UUID) *FuelRecordCreate {
	frc.mutation.SetCarID(u)
	return frc
}

// SetNextFuelRecordID sets the "next_fuel_record_id" field.
func (frc *FuelRecordCreate) SetNextFuelRecordID(u uuid.UUID) *FuelRecordCreate {
	frc.mutation.SetNextFuelRecordID(u)
	return frc
}

// SetNillableNextFuelRecordID sets the "next_fuel_record_id" field if the given value is not nil.
func (frc *FuelRecordCreate) SetNillableNextFuelRecordID(u *uuid.UUID) *FuelRecordCreate {
	if u != nil {
		frc.SetNextFuelRecordID(*u)
	}
	return frc
}

// SetID sets the "id" field.
func (frc *FuelRecordCreate) SetID(u uuid.UUID) *FuelRecordCreate {
	frc.mutation.SetID(u)
	return frc
}

// SetCar sets the "car" edge to the Car entity.
func (frc *FuelRecordCreate) SetCar(c *Car) *FuelRecordCreate {
	return frc.SetCarID(c.ID)
}

// SetNextID sets the "next" edge to the FuelRecord entity by ID.
func (frc *FuelRecordCreate) SetNextID(id uuid.UUID) *FuelRecordCreate {
	frc.mutation.SetNextID(id)
	return frc
}

// SetNillableNextID sets the "next" edge to the FuelRecord entity by ID if the given value is not nil.
func (frc *FuelRecordCreate) SetNillableNextID(id *uuid.UUID) *FuelRecordCreate {
	if id != nil {
		frc = frc.SetNextID(*id)
	}
	return frc
}

// SetNext sets the "next" edge to the FuelRecord entity.
func (frc *FuelRecordCreate) SetNext(f *FuelRecord) *FuelRecordCreate {
	return frc.SetNextID(f.ID)
}

// SetPrevID sets the "prev" edge to the FuelRecord entity by ID.
func (frc *FuelRecordCreate) SetPrevID(id uuid.UUID) *FuelRecordCreate {
	frc.mutation.SetPrevID(id)
	return frc
}

// SetNillablePrevID sets the "prev" edge to the FuelRecord entity by ID if the given value is not nil.
func (frc *FuelRecordCreate) SetNillablePrevID(id *uuid.UUID) *FuelRecordCreate {
	if id != nil {
		frc = frc.SetPrevID(*id)
	}
	return frc
}

// SetPrev sets the "prev" edge to the FuelRecord entity.
func (frc *FuelRecordCreate) SetPrev(f *FuelRecord) *FuelRecordCreate {
	return frc.SetPrevID(f.ID)
}

// Mutation returns the FuelRecordMutation object of the builder.
func (frc *FuelRecordCreate) Mutation() *FuelRecordMutation {
	return frc.mutation
}

// Save creates the FuelRecord in the database.
func (frc *FuelRecordCreate) Save(ctx context.Context) (*FuelRecord, error) {
	return withHooks(ctx, frc.sqlSave, frc.mutation, frc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FuelRecordCreate) SaveX(ctx context.Context) *FuelRecord {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frc *FuelRecordCreate) Exec(ctx context.Context) error {
	_, err := frc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frc *FuelRecordCreate) ExecX(ctx context.Context) {
	if err := frc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (frc *FuelRecordCreate) check() error {
	if _, ok := frc.mutation.CurrentFuelLiters(); !ok {
		return &ValidationError{Name: "current_fuel_liters", err: errors.New(`ent: missing required field "FuelRecord.current_fuel_liters"`)}
	}
	if v, ok := frc.mutation.CurrentFuelLiters(); ok {
		if err := fuelrecord.CurrentFuelLitersValidator(v); err != nil {
			return &ValidationError{Name: "current_fuel_liters", err: fmt.Errorf(`ent: validator failed for field "FuelRecord.current_fuel_liters": %w`, err)}
		}
	}
	if _, ok := frc.mutation.Difference(); !ok {
		return &ValidationError{Name: "difference", err: errors.New(`ent: missing required field "FuelRecord.difference"`)}
	}
	if _, ok := frc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FuelRecord.created_at"`)}
	}
	if _, ok := frc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "FuelRecord.car_id"`)}
	}
	if _, ok := frc.mutation.CarID(); !ok {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "FuelRecord.car"`)}
	}
	return nil
}

func (frc *FuelRecordCreate) sqlSave(ctx context.Context) (*FuelRecord, error) {
	if err := frc.check(); err != nil {
		return nil, err
	}
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	frc.mutation.id = &_node.ID
	frc.mutation.done = true
	return _node, nil
}

func (frc *FuelRecordCreate) createSpec() (*FuelRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &FuelRecord{config: frc.config}
		_spec = sqlgraph.NewCreateSpec(fuelrecord.Table, sqlgraph.NewFieldSpec(fuelrecord.FieldID, field.TypeUUID))
	)
	if id, ok := frc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := frc.mutation.CurrentFuelLiters(); ok {
		_spec.SetField(fuelrecord.FieldCurrentFuelLiters, field.TypeFloat64, value)
		_node.CurrentFuelLiters = value
	}
	if value, ok := frc.mutation.Difference(); ok {
		_spec.SetField(fuelrecord.FieldDifference, field.TypeFloat64, value)
		_node.Difference = value
	}
	if value, ok := frc.mutation.CreatedAt(); ok {
		_spec.SetField(fuelrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := frc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fuelrecord.CarTable,
			Columns: []string{fuelrecord.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CarID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := frc.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fuelrecord.NextTable,
			Columns: []string{fuelrecord.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NextFuelRecordID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := frc.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   fuelrecord.PrevTable,
			Columns: []string{fuelrecord.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelrecord.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FuelRecordCreateBulk is the builder for creating many FuelRecord entities in bulk.
type FuelRecordCreateBulk struct {
	config
	err      error
	builders []*FuelRecordCreate
}

// Save creates the FuelRecord entities in the database.
func (frcb *FuelRecordCreateBulk) Save(ctx context.Context) ([]*FuelRecord, error) {
	if frcb.err != nil {
		return nil, frcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*FuelRecord, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FuelRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (frcb *FuelRecordCreateBulk) SaveX(ctx context.Context) []*FuelRecord {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frcb *FuelRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := frcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frcb *FuelRecordCreateBulk) ExecX(ctx context.Context) {
	if err := frcb.Exec(ctx); err != nil {
		panic(err)
	}
}
